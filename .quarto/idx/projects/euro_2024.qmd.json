{"title":"Predicting Euro & Copa America - 2024","markdown":{"yaml":{"title":"Predicting Euro & Copa America - 2024","description":"A statistical model to analyze the results of the Euro Cup and the Copa America 2024.","author":[{"name":"Mauro Florez"},{"email":"mf53@rice.edu"}],"date":"2024-06-30","image":"copa_america.jpg","bibliography":"references.bib"},"headingText":"Packages","containsRefs":false,"markdown":"\n\nIn this project, I will propose a model for predicting the Euro & Copa America - 2024 scores based on the model presented in [@florez2024].\n\n\nI will use a Bayesian model, so we need the following libraries\n\n```{r, message=FALSE}\nrequire(rstanarm)\nrequire(rstantools)\nrequire(bayesplot)\n```\n\nAs well as\n\n```{r, message=FALSE}\nrequire(readr)\nrequire(dplyr)\nrequire(lubridate)\nrequire(ggplot2)\nrequire(ggrepel)\nrequire(latex2exp)\n```\n\n## Data\n\nThe data is contained in this repository <https://github.com/martj42/international_results>.\n\n```{r output = FALSE}\nurlfile = \"https://raw.githubusercontent.com/martj42/international_results/master/results.csv\"\n```\n\nWe load the data\n\n```{r }\ndata <- read_csv(url(urlfile), show_col_types = FALSE)\n```\n\nThe proposed model is based on the teams' strengths attacking and defending. To train the model, we used the scores of games played since season 2023-2024.\n\n```{r}\neuro_2024 = c('Albania','Austria','Belgium','Croatia','Czech Republic','Denmark','England','France','Georgia','Germany','Hungary','Italy','Netherlands','Poland','Portugal','Romania','Scotland','Serbia','Slovakia','Slovenia','Spain','Switzerland','Turkey','Ukraine')\n\namerica_2024 = sort(c('Argentina', 'Chile', 'Peru', 'Canada', 'Mexico', 'Ecuador', 'Venezuela', 'Jamaica', 'United States', 'Uruguay', 'Panama', 'Bolivia', 'Brazil', 'Colombia', 'Paraguay', 'Costa Rica'))  \n\nscores <- data %>% \n  filter(home_team %in% euro_2024 & away_team %in% euro_2024) %>% \n  filter(date > \"2023-06-01\") %>% \n  mutate(id = row_number(), cup = \"Euro\") %>% \n  bind_rows(data %>% \n  filter(home_team %in% america_2024 & away_team %in% america_2024) %>% \n  filter(date > \"2023-06-01\") %>% \n  mutate(id = row_number(), cup = \"America\")\n  )\n```\n\nFor example, we consider the following games played by Portugal.\n\n```{r}\nscores %>% \n  filter(home_team == \"Portugal\" | away_team == \"Portugal\")\n```\n\nand the following games played by Colombia\n\n```{r}\nscores %>% \n  filter(home_team == \"Colombia\" | away_team == \"Colombia\")\n```\n\n### Filtering data\n\n```{r}\nhome_scores <- scores %>% \n  select(id, score = home_score, team = home_team, adversary = away_team, date = date, cup) %>% \n  mutate(condition = ifelse(scores$neutral, \"neutral\", \"home\"))\n  \naway_scores <- scores %>% \n  select(id, score = away_score, team = away_team, adversary = home_team, date = date, cup) %>% \n  mutate(condition = ifelse(scores$neutral, \"neutral\", \"away\"))\n\ntotal_scores <- union_all(home_scores, away_scores)\n```\n\nWe also consider the ranking FIFA of the teams as covariate. For every game, select the up-to-date ranking\n\n```{r}\npath0 <- \"https://raw.githubusercontent.com/Dato-Futbol/fifa-ranking/master/ranking_fifa_historical.csv\"\nrank <- read_csv(url(path0), show_col_types = FALSE)\n\nrank <- rank %>% \n  select(team, total_points, date) %>% \n  group_by(date) %>% \n  mutate(ranking = rank(-total_points))\n```\n\nMerging the data will be\n\n```{r}\nscores_rank <- total_scores %>% \n  left_join(rank, by = join_by(adversary == team), relationship = \"many-to-many\") %>% \n  filter(date.x >= date.y) %>% \n  mutate(diff_date = date.x - date.y) %>% \n  group_by(id, team) %>% \n  slice_min(diff_date) %>% \n  select(id, score, team, adversary, condition, date_game = date.x, ranking_adv = ranking, date_rank = date.y, cup)\n```\n\nWe are separating the data for both Euro and Copa America. For both cases, we will use as test data the games played after the quarter-finals. i.e, we will finish predicting the results of the semi-finals and the finals.\n\n```{r}\ndate_euro = \"2024-07-09\"\ndate_ca = \"2024-07-09\"\n\ntrain_euro <- scores_rank %>% \n  filter(date_game < date_euro, cup == \"Euro\")\n\ntrain_america <- scores_rank %>% \n  filter(date_game < date_ca, cup == \"America\")\n\ntest_euro <- scores_rank %>% \n  filter(date_game >= date_euro, cup == \"Euro\")\n\ntest_america <- scores_rank %>% \n  filter(date_game >= date_ca, cup == \"America\")\n```\n\n## Fitting the model\n\nTo fit the model I would consider the scores are distributed as Poisson for simplicity, one better option is the Conway-Maxwell-Poisson as shown in [@florez2024]. However, we will use a simple model for computational reasons as we constantly update the model.\n\n```{r, output=FALSE}\nmodel_euro <- stan_glm(score ~ 1 + team + adversary + condition + ranking_adv, data = train_euro, family = poisson, iter = 5000, contrasts = list(team = \"contr.sum\", adversary = \"contr.sum\"))\n```\n\n```{r, output=FALSE}\nmodel_america <- stan_glm(score ~ 1 + team + adversary + condition + ranking_adv, data = train_america, family = poisson, iter = 5000, contrasts = list(team = \"contr.sum\", adversary = \"contr.sum\"))\n```\n\n## Estimation\n\n### Euro\n\n```{r}\nstrength_att <- model_euro$coefficients[2:24]\nstrength_att <- c(strength_att, 0 - sum(strength_att))\n\nstrength_def <- model_euro$coefficients[25:47]\nstrength_def <- c(strength_def, 0 - sum(strength_def))\n\ncoeffs <- data.frame(team = euro_2024, strength_att, strength_def, row.names = c())\n```\n\nNow, we can plot the estimated strengths in the following way:\n\n```{r}\nggplot(coeffs, aes(x = strength_att, y = -strength_def)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_point() +\n  geom_label_repel(aes(label = team),\n                            box.padding = 0.25,\n                            point.padding = 0.5,\n                            segment.color = \"grey50\") +\n  xlab(expression(\"Better Attack\" %->% \"\")) +\n  ylab(expression(\"Better Defense\" %->% \"\")) + \n  ggtitle(\"Strengths of every team\") + \n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\nThis graph provides an intuition into the strengths and abilities of every team. Teams located in the origin have an overall performance, and below the axis are worse than the averages' team.\n\n### Copa America\n\nSimilarly for Copa america\n\n```{r}\nn <- length(america_2024)\nstrength_att <- model_america$coefficients[2:n]\nstrength_att <- c(strength_att, 0 - sum(strength_att))\n\nstrength_def <- model_america$coefficients[(n+1):(2*n-1)]\nstrength_def <- c(strength_def, 0 - sum(strength_def))\n\ncoeffs <- data.frame(team = america_2024, strength_att, strength_def, row.names = c())\n```\n\nNow, we can plot the estimated strengths in the following way:\n\n```{r}\nggplot(coeffs, aes(x = strength_att, y = -strength_def)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_point() +\n  geom_label_repel(aes(label = team),\n                            box.padding = 0.25,\n                            point.padding = 0.5,\n                            segment.color = \"grey50\") +\n  xlab(expression(\"Better Attack\" %->% \"\")) +\n  ylab(expression(\"Better Defense\" %->% \"\")) + \n  ggtitle(\"Strengths of every team\") + \n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n## Predictions\n\n### Euro\n\nNow, we predict the scores of the future games, i.e, the semifinals and the final.\n\n```{r}\ntest_pred <- test_euro %>% \n  select(id, team, adversary, condition, ranking_adv)\n\npredictions <- posterior_predict(model_euro, newdata = test_pred) \n\nmean_goals <- apply(predictions, 2, mean)\n\ntest_pred <- test_pred %>% \n  ungroup() %>% \n  mutate(goals = mean_goals) %>% \n  group_by(id) %>% \n  summarise(\"Team 1\" = first(team),\n            \"Exp. Goals\" = first(goals),\n            \"Team 2\" = last(team),\n            \"Exp. Goals 2\" = last(goals)) \n```\n\nThe predictions of future games are:\n\n```{r}\ntest_pred %>% \n  print(n = 1e3)\n  \n```\n\nParticullarly, the distribution of the prediction of the score for the final looks as shown below.\n\n```{r}\nresults_game <- tibble(\"England\" = predictions[,5], \"Spain\" = predictions[,6])\n\ndf_count <- results_game %>% \n  group_by(England, Spain) %>% \n  summarise(count = n(), .groups = \"keep\") %>% \n  ungroup()\n\ntotal_combinations <- nrow(results_game)\n\ndf_count <- df_count %>% \n    mutate(proportion = count/total_combinations)\n  \nggplot(df_count, aes(x = England, y = Spain, fill = proportion)) +\n  geom_tile() + \n  scale_fill_gradient(low = \"white\", high = \"blue\") + \n  labs(title = \"Heatmap of Goals Scored by the two teams\",\n       x = \"England\", \n       y = \"Spain\",\n       fill = \"Probability\") + \n  theme_minimal()\n```\n\nAccording to this, it is likely that the final will be Spain vs. England. **Spain is expected to be the champion, with a predicted score of 2-0.**\n\n### Copa America\n\nSimilarly, we can generate the predictions for the last round of the games in Copa Am√©rica\n\n```{r}\ntest_pred <- test_america %>% \n  select(id, team, adversary, condition, ranking_adv)\n\npredictions <- posterior_predict(model_america, newdata = test_pred) \n\nmean_goals <- apply(predictions, 2, mean)\n\ntest_pred <- test_pred %>% \n  ungroup() %>% \n  mutate(goals = mean_goals) %>% \n  group_by(id) %>% \n  summarise(\"Team 1\" = first(team),\n            \"Exp. Goals\" = first(goals),\n            \"Team 2\" = last(team),\n            \"Exp. Goals 2\" = last(goals)) \n\n```\n\n```{r}\ntest_pred %>% \n  print(n = 1e3)\n```\n\nIn this case, Argentina is expected to easily defeat Canada, and Uruguay will likely beat Colombia. However, Colombia won its game 1-0, so the final will be Argentina vs. Colombia, while the 3rd and 4th place game will be played between Canada and Uruguay.\n\n**The final is anticipated to be a close match, with the most likely result being 0-0, as indicated below. However, Argentina is expected to have a slightly higher probability of scoring more goals than Colombia.**\n\n```{r}\nresults_game <- tibble(\"Argentina\" = predictions[,7], \"Colombia\" = predictions[,8])\n\ndf_count <- results_game %>% \n  group_by(Argentina, Colombia) %>% \n  summarise(count = n(), .groups = \"keep\") %>% \n  ungroup()\n\ntotal_combinations <- nrow(results_game)\n\ndf_count <- df_count %>% \n    mutate(proportion = count/total_combinations)\n  \nggplot(df_count, aes(x = Argentina, y = Colombia, fill = proportion)) +\n  geom_tile() + \n  scale_fill_gradient(low = \"white\", high = \"blue\") + \n  labs(title = \"Heatmap of Goals Scored by the two teams\",\n       x = \"Argentina\", \n       y = \"Colombia\",\n       fill = \"Probability\") + \n  theme_minimal()\n```\n\nAs we saw, the model accurately predicted the scores and captured the strengths of each team. It also produced reasonable and accurate results for the final games based on the quarter-final outcomes. **Spain defeated England 2-1**, while the match between **Argentina and Colombia ended 0-0**, with Argentina scoring a goal in extra time.\n\nFor future models, incorporating dynamic strengths could improve accuracy.\n","srcMarkdownNoYaml":"\n\nIn this project, I will propose a model for predicting the Euro & Copa America - 2024 scores based on the model presented in [@florez2024].\n\n## Packages\n\nI will use a Bayesian model, so we need the following libraries\n\n```{r, message=FALSE}\nrequire(rstanarm)\nrequire(rstantools)\nrequire(bayesplot)\n```\n\nAs well as\n\n```{r, message=FALSE}\nrequire(readr)\nrequire(dplyr)\nrequire(lubridate)\nrequire(ggplot2)\nrequire(ggrepel)\nrequire(latex2exp)\n```\n\n## Data\n\nThe data is contained in this repository <https://github.com/martj42/international_results>.\n\n```{r output = FALSE}\nurlfile = \"https://raw.githubusercontent.com/martj42/international_results/master/results.csv\"\n```\n\nWe load the data\n\n```{r }\ndata <- read_csv(url(urlfile), show_col_types = FALSE)\n```\n\nThe proposed model is based on the teams' strengths attacking and defending. To train the model, we used the scores of games played since season 2023-2024.\n\n```{r}\neuro_2024 = c('Albania','Austria','Belgium','Croatia','Czech Republic','Denmark','England','France','Georgia','Germany','Hungary','Italy','Netherlands','Poland','Portugal','Romania','Scotland','Serbia','Slovakia','Slovenia','Spain','Switzerland','Turkey','Ukraine')\n\namerica_2024 = sort(c('Argentina', 'Chile', 'Peru', 'Canada', 'Mexico', 'Ecuador', 'Venezuela', 'Jamaica', 'United States', 'Uruguay', 'Panama', 'Bolivia', 'Brazil', 'Colombia', 'Paraguay', 'Costa Rica'))  \n\nscores <- data %>% \n  filter(home_team %in% euro_2024 & away_team %in% euro_2024) %>% \n  filter(date > \"2023-06-01\") %>% \n  mutate(id = row_number(), cup = \"Euro\") %>% \n  bind_rows(data %>% \n  filter(home_team %in% america_2024 & away_team %in% america_2024) %>% \n  filter(date > \"2023-06-01\") %>% \n  mutate(id = row_number(), cup = \"America\")\n  )\n```\n\nFor example, we consider the following games played by Portugal.\n\n```{r}\nscores %>% \n  filter(home_team == \"Portugal\" | away_team == \"Portugal\")\n```\n\nand the following games played by Colombia\n\n```{r}\nscores %>% \n  filter(home_team == \"Colombia\" | away_team == \"Colombia\")\n```\n\n### Filtering data\n\n```{r}\nhome_scores <- scores %>% \n  select(id, score = home_score, team = home_team, adversary = away_team, date = date, cup) %>% \n  mutate(condition = ifelse(scores$neutral, \"neutral\", \"home\"))\n  \naway_scores <- scores %>% \n  select(id, score = away_score, team = away_team, adversary = home_team, date = date, cup) %>% \n  mutate(condition = ifelse(scores$neutral, \"neutral\", \"away\"))\n\ntotal_scores <- union_all(home_scores, away_scores)\n```\n\nWe also consider the ranking FIFA of the teams as covariate. For every game, select the up-to-date ranking\n\n```{r}\npath0 <- \"https://raw.githubusercontent.com/Dato-Futbol/fifa-ranking/master/ranking_fifa_historical.csv\"\nrank <- read_csv(url(path0), show_col_types = FALSE)\n\nrank <- rank %>% \n  select(team, total_points, date) %>% \n  group_by(date) %>% \n  mutate(ranking = rank(-total_points))\n```\n\nMerging the data will be\n\n```{r}\nscores_rank <- total_scores %>% \n  left_join(rank, by = join_by(adversary == team), relationship = \"many-to-many\") %>% \n  filter(date.x >= date.y) %>% \n  mutate(diff_date = date.x - date.y) %>% \n  group_by(id, team) %>% \n  slice_min(diff_date) %>% \n  select(id, score, team, adversary, condition, date_game = date.x, ranking_adv = ranking, date_rank = date.y, cup)\n```\n\nWe are separating the data for both Euro and Copa America. For both cases, we will use as test data the games played after the quarter-finals. i.e, we will finish predicting the results of the semi-finals and the finals.\n\n```{r}\ndate_euro = \"2024-07-09\"\ndate_ca = \"2024-07-09\"\n\ntrain_euro <- scores_rank %>% \n  filter(date_game < date_euro, cup == \"Euro\")\n\ntrain_america <- scores_rank %>% \n  filter(date_game < date_ca, cup == \"America\")\n\ntest_euro <- scores_rank %>% \n  filter(date_game >= date_euro, cup == \"Euro\")\n\ntest_america <- scores_rank %>% \n  filter(date_game >= date_ca, cup == \"America\")\n```\n\n## Fitting the model\n\nTo fit the model I would consider the scores are distributed as Poisson for simplicity, one better option is the Conway-Maxwell-Poisson as shown in [@florez2024]. However, we will use a simple model for computational reasons as we constantly update the model.\n\n```{r, output=FALSE}\nmodel_euro <- stan_glm(score ~ 1 + team + adversary + condition + ranking_adv, data = train_euro, family = poisson, iter = 5000, contrasts = list(team = \"contr.sum\", adversary = \"contr.sum\"))\n```\n\n```{r, output=FALSE}\nmodel_america <- stan_glm(score ~ 1 + team + adversary + condition + ranking_adv, data = train_america, family = poisson, iter = 5000, contrasts = list(team = \"contr.sum\", adversary = \"contr.sum\"))\n```\n\n## Estimation\n\n### Euro\n\n```{r}\nstrength_att <- model_euro$coefficients[2:24]\nstrength_att <- c(strength_att, 0 - sum(strength_att))\n\nstrength_def <- model_euro$coefficients[25:47]\nstrength_def <- c(strength_def, 0 - sum(strength_def))\n\ncoeffs <- data.frame(team = euro_2024, strength_att, strength_def, row.names = c())\n```\n\nNow, we can plot the estimated strengths in the following way:\n\n```{r}\nggplot(coeffs, aes(x = strength_att, y = -strength_def)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_point() +\n  geom_label_repel(aes(label = team),\n                            box.padding = 0.25,\n                            point.padding = 0.5,\n                            segment.color = \"grey50\") +\n  xlab(expression(\"Better Attack\" %->% \"\")) +\n  ylab(expression(\"Better Defense\" %->% \"\")) + \n  ggtitle(\"Strengths of every team\") + \n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\nThis graph provides an intuition into the strengths and abilities of every team. Teams located in the origin have an overall performance, and below the axis are worse than the averages' team.\n\n### Copa America\n\nSimilarly for Copa america\n\n```{r}\nn <- length(america_2024)\nstrength_att <- model_america$coefficients[2:n]\nstrength_att <- c(strength_att, 0 - sum(strength_att))\n\nstrength_def <- model_america$coefficients[(n+1):(2*n-1)]\nstrength_def <- c(strength_def, 0 - sum(strength_def))\n\ncoeffs <- data.frame(team = america_2024, strength_att, strength_def, row.names = c())\n```\n\nNow, we can plot the estimated strengths in the following way:\n\n```{r}\nggplot(coeffs, aes(x = strength_att, y = -strength_def)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n  geom_point() +\n  geom_label_repel(aes(label = team),\n                            box.padding = 0.25,\n                            point.padding = 0.5,\n                            segment.color = \"grey50\") +\n  xlab(expression(\"Better Attack\" %->% \"\")) +\n  ylab(expression(\"Better Defense\" %->% \"\")) + \n  ggtitle(\"Strengths of every team\") + \n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n\n## Predictions\n\n### Euro\n\nNow, we predict the scores of the future games, i.e, the semifinals and the final.\n\n```{r}\ntest_pred <- test_euro %>% \n  select(id, team, adversary, condition, ranking_adv)\n\npredictions <- posterior_predict(model_euro, newdata = test_pred) \n\nmean_goals <- apply(predictions, 2, mean)\n\ntest_pred <- test_pred %>% \n  ungroup() %>% \n  mutate(goals = mean_goals) %>% \n  group_by(id) %>% \n  summarise(\"Team 1\" = first(team),\n            \"Exp. Goals\" = first(goals),\n            \"Team 2\" = last(team),\n            \"Exp. Goals 2\" = last(goals)) \n```\n\nThe predictions of future games are:\n\n```{r}\ntest_pred %>% \n  print(n = 1e3)\n  \n```\n\nParticullarly, the distribution of the prediction of the score for the final looks as shown below.\n\n```{r}\nresults_game <- tibble(\"England\" = predictions[,5], \"Spain\" = predictions[,6])\n\ndf_count <- results_game %>% \n  group_by(England, Spain) %>% \n  summarise(count = n(), .groups = \"keep\") %>% \n  ungroup()\n\ntotal_combinations <- nrow(results_game)\n\ndf_count <- df_count %>% \n    mutate(proportion = count/total_combinations)\n  \nggplot(df_count, aes(x = England, y = Spain, fill = proportion)) +\n  geom_tile() + \n  scale_fill_gradient(low = \"white\", high = \"blue\") + \n  labs(title = \"Heatmap of Goals Scored by the two teams\",\n       x = \"England\", \n       y = \"Spain\",\n       fill = \"Probability\") + \n  theme_minimal()\n```\n\nAccording to this, it is likely that the final will be Spain vs. England. **Spain is expected to be the champion, with a predicted score of 2-0.**\n\n### Copa America\n\nSimilarly, we can generate the predictions for the last round of the games in Copa Am√©rica\n\n```{r}\ntest_pred <- test_america %>% \n  select(id, team, adversary, condition, ranking_adv)\n\npredictions <- posterior_predict(model_america, newdata = test_pred) \n\nmean_goals <- apply(predictions, 2, mean)\n\ntest_pred <- test_pred %>% \n  ungroup() %>% \n  mutate(goals = mean_goals) %>% \n  group_by(id) %>% \n  summarise(\"Team 1\" = first(team),\n            \"Exp. Goals\" = first(goals),\n            \"Team 2\" = last(team),\n            \"Exp. Goals 2\" = last(goals)) \n\n```\n\n```{r}\ntest_pred %>% \n  print(n = 1e3)\n```\n\nIn this case, Argentina is expected to easily defeat Canada, and Uruguay will likely beat Colombia. However, Colombia won its game 1-0, so the final will be Argentina vs. Colombia, while the 3rd and 4th place game will be played between Canada and Uruguay.\n\n**The final is anticipated to be a close match, with the most likely result being 0-0, as indicated below. However, Argentina is expected to have a slightly higher probability of scoring more goals than Colombia.**\n\n```{r}\nresults_game <- tibble(\"Argentina\" = predictions[,7], \"Colombia\" = predictions[,8])\n\ndf_count <- results_game %>% \n  group_by(Argentina, Colombia) %>% \n  summarise(count = n(), .groups = \"keep\") %>% \n  ungroup()\n\ntotal_combinations <- nrow(results_game)\n\ndf_count <- df_count %>% \n    mutate(proportion = count/total_combinations)\n  \nggplot(df_count, aes(x = Argentina, y = Colombia, fill = proportion)) +\n  geom_tile() + \n  scale_fill_gradient(low = \"white\", high = \"blue\") + \n  labs(title = \"Heatmap of Goals Scored by the two teams\",\n       x = \"Argentina\", \n       y = \"Colombia\",\n       fill = \"Probability\") + \n  theme_minimal()\n```\n\nAs we saw, the model accurately predicted the scores and captured the strengths of each team. It also produced reasonable and accurate results for the final games based on the quarter-final outcomes. **Spain defeated England 2-1**, while the match between **Argentina and Colombia ended 0-0**, with Argentina scoring a goal in extra time.\n\nFor future models, incorporating dynamic strengths could improve accuracy.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"euro_2024.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","editor":"visual","theme":{"light":"flatly","dark":"darkly"},"page-layout":"full","title":"Predicting Euro & Copa America - 2024","description":"A statistical model to analyze the results of the Euro Cup and the Copa America 2024.","author":[{"name":"Mauro Florez"},{"email":"mf53@rice.edu"}],"date":"2024-06-30","image":"copa_america.jpg","bibliography":["references.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}