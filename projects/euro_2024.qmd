---
title: Predicting Euro & Copa America - 2024
description: I proposed a statistical model to analyze the results of the Euro Cup and the Copa America 2024.
author: 
  - name: Mauro Florez
    email: mf53@rice.edu
date: 2024-06-30
---

In this project, I will propose a model for the Euro & Copa America - 2024 scores.

## Packages

I will use a Bayesian model, so we need the following libraries

```{r, message=FALSE}
require(rstanarm)
require(rstantools)
require(bayesplot)
```

As well as

```{r, message=FALSE}
require(readr)
require(dplyr)
require(lubridate)
require(ggplot2)
require(ggrepel)
require(latex2exp)
```

## Data

The data is contained in this repository <https://github.com/martj42/international_results>.

```{r output = FALSE}
urlfile = "https://raw.githubusercontent.com/martj42/international_results/master/results.csv"
```

We load the data

```{r }
data <- read_csv(url(urlfile), show_col_types = FALSE)
```

The proposed model is based on the teams' strengths attacking and defending. Therefore, we will consider only the games played during 2024. An improved model would be one with dynamic strengths. But that is a future project.

```{r}
euro_2024 = c('Albania','Austria','Belgium','Croatia','Czech Republic','Denmark','England','France','Georgia','Germany','Hungary','Italy','Netherlands','Poland','Portugal','Romania','Scotland','Serbia','Slovakia','Slovenia','Spain','Switzerland','Turkey','Ukraine')

america_2024 = sort(c('Argentina', 'Chile', 'Peru', 'Canada', 'Mexico', 'Ecuador', 'Venezuela', 'Jamaica', 'United States', 'Uruguay', 'Panama', 'Bolivia', 'Brazil', 'Colombia', 'Paraguay', 'Costa Rica'))  

scores <- data %>% 
  filter(home_team %in% euro_2024 & away_team %in% euro_2024) %>% 
  filter(date > "2023-06-01") %>% 
  mutate(id = row_number(), cup = "Euro") %>% 
  bind_rows(data %>% 
  filter(home_team %in% america_2024 & away_team %in% america_2024) %>% 
  filter(date > "2023-06-01") %>% 
  mutate(id = row_number(), cup = "America")
  )
```

For example, we consider the following games played by Portugal.

```{r}
scores %>% 
  filter(home_team == "Portugal" | away_team == "Portugal")
```

and the following games played by Colombia

```{r}
scores %>% 
  filter(home_team == "Colombia" | away_team == "Colombia")
```

### Filtering data

```{r}
home_scores <- scores %>% 
  select(id, score = home_score, team = home_team, adversary = away_team, date = date, cup) %>% 
  mutate(condition = ifelse(scores$neutral, "neutral", "home"))
  
away_scores <- scores %>% 
  select(id, score = away_score, team = away_team, adversary = home_team, date = date, cup) %>% 
  mutate(condition = ifelse(scores$neutral, "neutral", "away"))

total_scores <- union_all(home_scores, away_scores)
```

We also consider the ranking FIFA of the teams as covariate. For every game, select the up-to-date ranking

```{r}
path0 <- "https://raw.githubusercontent.com/Dato-Futbol/fifa-ranking/master/ranking_fifa_historical.csv"
rank <- read_csv(url(path0), show_col_types = FALSE)

rank <- rank %>% 
  select(team, total_points, date) %>% 
  group_by(date) %>% 
  mutate(ranking = rank(-total_points))
```

Merging the data will be

```{r}
scores_rank <- total_scores %>% 
  left_join(rank, by = join_by(adversary == team), relationship = "many-to-many") %>% 
  filter(date.x >= date.y) %>% 
  mutate(diff_date = date.x - date.y) %>% 
  group_by(id, team) %>% 
  slice_min(diff_date) %>% 
  select(id, score, team, adversary, condition, date_game = date.x, ranking_adv = ranking, date_rank = date.y, cup)
```

We are separating the data for both Euro and Copa America. In the case of the Euro, the eighth-finals started on June 29th, we will train the data before that data and leave the rest for testing. In the case of Copa America, I will train it before the last round of groups started.

```{r}
date_euro = "2024-06-28"
date_ca = "2024-06-29"

train_euro <- scores_rank %>% 
  filter(date_game < date_euro, cup == "Euro")

train_america <- scores_rank %>% 
  filter(date_game < date_ca, cup == "America")

test_euro <- scores_rank %>% 
  filter(date_game >= date_euro, cup == "Euro")

test_america <- scores_rank %>% 
  filter(date_game >= date_ca, cup == "America")
```

## Fitting the model

To fit the model I would consider the scores Neg. Binomial distributed for simplicity, one better option is the Conway-Maxwell-Poisson. However, we will use a simple model for computational reasons.

```{r, output=FALSE}
model_euro <- stan_glm(score ~ 1 + team + adversary + condition + ranking_adv, data = train_euro, family = poisson, iter = 5000, contrasts = list(team = "contr.sum", adversary = "contr.sum"))
```

```{r, output=FALSE}
model_america <- stan_glm(score ~ 1 + team + adversary + condition + ranking_adv, data = train_america, family = poisson, iter = 5000, contrasts = list(team = "contr.sum", adversary = "contr.sum"))
```

## Estimattion

### Euro

```{r}
strength_att <- model_euro$coefficients[2:24]
strength_att <- c(strength_att, 0 - sum(strength_att))

strength_def <- model_euro$coefficients[25:47]
strength_def <- c(strength_def, 0 - sum(strength_def))

coeffs <- data.frame(team = euro_2024, strength_att, strength_def, row.names = c())
```

Now, we can plot the estimated strengths in the following way:

```{r}
ggplot(coeffs, aes(x = strength_att, y = -strength_def)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey50") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey50") +
  geom_point() +
  geom_label_repel(aes(label = team),
                            box.padding = 0.25,
                            point.padding = 0.5,
                            segment.color = "grey50") +
  xlab(expression("Better Attack" %->% "")) +
  ylab(expression("Better Defense" %->% "")) + 
  ggtitle("Strengths of every team") + 
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
```

This graph provides an intuition into the strengths and abilities of every team. Teams located in the origin have an overall performance, and below the axis are worse than the averages' team.

### Copa America

Similarly for Copa america

```{r}
n <- length(america_2024)
strength_att <- model_america$coefficients[2:n]
strength_att <- c(strength_att, 0 - sum(strength_att))

strength_def <- model_america$coefficients[(n+1):(2*n-1)]
strength_def <- c(strength_def, 0 - sum(strength_def))

coeffs <- data.frame(team = america_2024, strength_att, strength_def, row.names = c())
```

Now, we can plot the estimated strengths in the following way:

```{r}
ggplot(coeffs, aes(x = strength_att, y = -strength_def)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey50") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey50") +
  geom_point() +
  geom_label_repel(aes(label = team),
                            box.padding = 0.25,
                            point.padding = 0.5,
                            segment.color = "grey50") +
  xlab(expression("Better Attack" %->% "")) +
  ylab(expression("Better Defense" %->% "")) + 
  ggtitle("Strengths of every team") + 
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
```

## Predictions

### Euro

Now, we predict the scores of the future games:

```{r}
test_pred <- test_euro %>% 
  select(id, team, adversary, condition, ranking_adv)

predictions <- posterior_predict(model_euro, newdata = test_pred) 

mean_goals <- apply(predictions, 2, mean)

test_pred <- test_pred %>% 
  ungroup() %>% 
  mutate(goals = mean_goals) %>% 
  group_by(id) %>% 
  summarise("Team 1" = first(team),
            "Exp. Goals" = first(goals),
            "Team 2" = last(team),
            "Exp. Goals 2" = last(goals)) 
```

Therefore the predictions of future games are:

### Round of 16

```{r}
test_pred %>% 
  print(n = 1e3)
  
```

According to this, the quarter-finals will be Switzerland vs England, Austria vs Netherlands, France vs Slovenia, Germany vs Spain.

### Quarter-Finals

To update

### Copa America

Similarly, we can generate the predictions for the last round of the games in Copa Am√©rica

```{r}
test_pred <- test_america %>% 
  select(id, team, adversary, condition, ranking_adv)

predictions <- posterior_predict(model_america, newdata = test_pred) 

mean_goals <- apply(predictions, 2, mean)

test_pred <- test_pred %>% 
  ungroup() %>% 
  mutate(goals = mean_goals) %>% 
  group_by(id) %>% 
  summarise("Team 1" = first(team),
            "Exp. Goals" = first(goals),
            "Team 2" = last(team),
            "Exp. Goals 2" = last(goals)) 

```

```{r}
test_pred %>% 
  print(n = 1e3)
```

If we want to see the distribution of a particular game, for example the game 92, Argentina vs Ecuador, it will be something like

```{r}
results_game <- tibble("Argentina" = predictions[,16], "Ecuador" = predictions[,17])

df_count <- results_game %>% 
  group_by(Argentina, Ecuador) %>% 
  summarise(count = n(), .groups = "keep") %>% 
  ungroup()

total_combinations <- nrow(results_game)

df_count <- df_count %>% 
    mutate(proportion = count/total_combinations)
  
ggplot(df_count, aes(x = Argentina, y = Ecuador, fill = proportion)) +
  geom_tile() + 
  scale_fill_gradient(low = "white", high = "blue") + 
  labs(title = "Heatmap of Goals Scored by the two teams",
       x = "Argentina", 
       y = "Ecuador",
       fill = "Probability") + 
  theme_minimal()
```
