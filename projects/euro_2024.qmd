---
title: Predicting Euro-2024 Results
---

In this project, I will propose a model to predict the scores in the Euro 2024.

## Packages

I will use a Bayesian model, so we need the following libraries

```{r, message=FALSE}
require(rstanarm)
require(rstantools)
require(bayesplot)
```

As well as

```{r, message=FALSE}
require(readr)
require(dplyr)
require(lubridate)
require(ggplot2)
require(ggrepel)
require(latex2exp)
```

## Data

The data is contained in this repository <https://github.com/martj42/international_results>.

```{r output = FALSE}
urlfile = "https://raw.githubusercontent.com/martj42/international_results/master/results.csv"
```

We load the data

```{r }
data <- read_csv(url(urlfile), show_col_types = FALSE)
```

The proposed model is based on the teams' strengths attacking and defending. Therefore, we will consider only the games played during 2024. An improved model would be one with dynamic strengths.

```{r}
euro_2024 = c('Albania','Austria','Belgium','Croatia','Czech Republic','Denmark','England','France','Georgia','Germany','Hungary','Italy','Netherlands','Poland','Portugal','Romania','Scotland','Serbia','Slovakia','Slovenia','Spain','Switzerland','Turkey','Ukraine')

scores <- data %>% 
  filter(home_team %in% euro_2024 & away_team %in% euro_2024) %>% 
  filter(date > "2023-01-01") %>% 
  mutate(id = row_number())

```

For example, we consider the following games played by Portugal

```{r}
scores %>% 
  filter(home_team == "Portugal" | away_team == "Portugal")
```

```{r}
home_scores <- scores %>% 
  select(id, score = home_score, team = home_team, adversary = away_team, date = date) %>% 
  mutate(condition = ifelse(scores$neutral, "neutral", "home"))
  
away_scores <- scores %>% 
  select(id, score = away_score, team = away_team, adversary = home_team, date = date) %>% 
  mutate(condition = ifelse(scores$neutral, "neutral", "away"))

total_scores <- union_all(home_scores, away_scores)
```

We also consider the ranking FIFA of the teams as covariate. For every game, select the up-to-date ranking

```{r}
path0 <- "https://raw.githubusercontent.com/Dato-Futbol/fifa-ranking/master/ranking_fifa_historical.csv"
rank <- read_csv(url(path0), show_col_types = FALSE)

rank <- rank %>% 
  select(team, total_points, date) %>% 
  group_by(date) %>% 
  mutate(ranking = rank(-total_points))
```

```{r}
total_scores <- total_scores %>% 
  left_join(rank, by = join_by(adversary == team), relationship = "many-to-many") %>% 
  filter(date.x >= date.y) %>% 
  mutate(diff_date = date.x - date.y) %>% 
  group_by(id, team) %>% 
  slice_min(diff_date) %>% 
  select(id, score, team, adversary, condition, date_game = date.x, ranking_adv = ranking, date_rank = date.y)

train <- total_scores %>% 
  filter(date_game < today())

test <- total_scores %>% 
  filter(date_game >= today())
```

## Fitting the model

To fit the model I would consider the scores Neg. Binomial distributed for simplicity, one better option is the Conway-Maxwell-Poisson. However, we will use a simple model for computational reasons.

```{r, output=FALSE}
model <- stan_glm(score ~ 1 + team + adversary + condition + ranking_adv, data = train, family = poisson, iter = 1000, contrasts = list(team = "contr.sum", adversary = "contr.sum"))
```

### Estimated Parameters

```{r}
strength_att <- model$coefficients[2:24]
strength_att <- c(strength_att, 0 - sum(strength_att))

strength_def <- model$coefficients[25:47]
strength_def <- c(strength_def, 0 - sum(strength_def))

coeffs <- data.frame(team = euro_2024, strength_att, strength_def, row.names = c())
```

Now, we can plot the estimated strengths in the following way:

```{r}
ggplot(coeffs, aes(x = exp(strength_att), y = exp(-strength_def))) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "grey50") +
  geom_vline(xintercept = 1, linetype = "dashed", color = "grey50") +
  geom_point() +
  geom_label_repel(aes(label = team),
                            box.padding = 0.25,
                            point.padding = 0.5,
                            segment.color = "grey50") +
  xlab(expression("Better Attack" %->% "")) +
  ylab(expression("Better Defense" %->% "")) + 
  ggtitle("Strengths of every team") + 
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
```

This graph provides an intuition into the strengths and abilities of every team. Teams located in the origin have an overall performance, and below the axis are worse than the averages' team.

Now, we predict the scores of the future games:

```{r}
test_pred <- test %>% 
  select(id, team, adversary, condition, ranking_adv)
predictions <- posterior_predict(model, newdata = test_pred) 
mean_goals <- apply(predictions, 2, mean)

test_pred <- test_pred %>% 
  ungroup() %>% 
  mutate(goals = mean_goals) %>% 
  group_by(id) %>% 
  summarise("Team 1" = first(team),
            "Exp. Goals" = first(goals),
            "Team 2" = last(team),
            "Exp. Goals" = last(goals)) 
```

Therefore the predictions of future games are:

## Predictions

```{r}
test_pred %>% 
  print(n = 1e3)
  
```
